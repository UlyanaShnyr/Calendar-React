{"version":3,"sources":["Components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","state","dateContext","moment","today","showMonth","showYear","weekdays","weekdaysShort","months","year","_this","format","month","daysInMonth","currentDate","get","firstDayOfMonth","startOf","setMonth","monthNo","indexOf","Object","assign","set","setState","onSelectChange","e","data","SelectList","props","popup","map","react_default","a","createElement","key","href","onClick","className","onChangeMonth","MonthNav","_this2","setYear","onChangeYear","target","value","YearNav","defaultValue","ref","yearInput","onKeyUp","onKeyUpYear","onChange","type","placeholder","prevMonth","subtract","onPrevMonth","nextMonth","add","onNextMonth","onDayClick","day","_this3","this","blanks","i","push","_loop","d","totalSlots","concat","rows","cells","forEach","row","insertRow","slice","length","trElems","FontAwesome","require","colSpan","name","style","color","React","Component","App","alert","Calendar_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ba7e447.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport './calendar.css';\r\n\r\nexport default class Calendar extends React.Component {\r\n    state = {\r\n        dateContext: moment(),\r\n        today: moment(),\r\n        showMonth: false,\r\n        showYear: false,\r\n    }\r\n\r\n    weekdays = moment.weekdays();\r\n    weekdaysShort = moment.weekdaysShort();\r\n    months = moment.months();\r\n\r\n    year = () => {\r\n        return this.state.dateContext.format(\"Y\");\r\n    }\r\n\r\n    month = () => {\r\n        return this.state.dateContext.format(\"MMMM\");\r\n    }\r\n\r\n    daysInMonth = () => {\r\n        return this.state.dateContext.daysInMonth();\r\n    }\r\n    \r\n    currentDate = () => {       \r\n        return this.state.dateContext.get(\"date\");\r\n    }\r\n\r\n    firstDayOfMonth = () => {\r\n        let dateContext = this.state.dateContext;\r\n        let firstDay = moment(dateContext).startOf('month').format('d');\r\n        return firstDay;\r\n    }\r\n\r\n    setMonth = (month) => {\r\n        let monthNo = this.months.indexOf(month);\r\n        let dateContext = Object.assign({}, this.state.dateContext);\r\n        dateContext = moment(dateContext).set(\"month\", monthNo);\r\n        this.setState({\r\n            dateContext: dateContext\r\n        })\r\n    }\r\n\r\n    onSelectChange = (e, data) => {\r\n        this.setMonth(data);\r\n    }\r\n    \r\n    SelectList = (props) => {\r\n        let popup = props.data.map((data) => {\r\n            return (\r\n                <div key={data}>\r\n                    <a href=\"#\" onClick={(e) => { this.onSelectChange(e, data) }}>\r\n                        {data}\r\n                    </a>\r\n                </div>\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"month-popup\">\r\n                {popup}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    onChangeMonth = () => {\r\n        this.setState({\r\n            showMonth: !this.state.showMonth\r\n        })\r\n    }\r\n    MonthNav = () => {\r\n        return (\r\n            <div \r\n                onClick={(e) => { this.onChangeMonth(e, this.month()) }}>\r\n                {this.month()}\r\n                {this.state.showMonth &&\r\n                    <this.SelectList data={this.months} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showYear = () => {\r\n        this.setState({\r\n            showYear: true\r\n        })\r\n    }\r\n\r\n    setYear = (year) => {\r\n        let dateContext = Object.assign({}, this.state.dateContext);\r\n        dateContext = moment(dateContext).set(\"year\", year);\r\n        this.setState({\r\n            dateContext: dateContext\r\n        })\r\n    }\r\n\r\n    onChangeYear = (e) => {\r\n        this.setYear(e.target.value);\r\n        this.props.onChangeYear && this.props.onChangeYear(e, e.target.value);\r\n    }\r\n\r\n\r\n    YearNav = () => {\r\n        return (\r\n            this.state.showYear ?\r\n                <input\r\n                    defaultValue={this.year()}\r\n                    ref={(yearInput) => this.yearInput = yearInput}\r\n                    onKeyUp={(e) => this.onKeyUpYear(e)}\r\n                    onChange={(e) => this.onChangeYear(e)}\r\n                    type=\"number\"\r\n                    placeholder=\"year\"\r\n                />\r\n                :\r\n                <span\r\n                    onClick={(e) => { this.showYear(e, this.year()) }}>\r\n                    {this.year()}\r\n                </span>\r\n        )\r\n    }\r\n\r\n    prevMonth = () => {\r\n        let dateContext = Object.assign({}, this.state.dateContext);\r\n        dateContext = moment(dateContext).subtract(1, \"month\");\r\n        this.setState({\r\n            dateContext: dateContext\r\n        });\r\n        this.props.onPrevMonth && this.props.onPrevMonth();\r\n    }\r\n\r\n    nextMonth = () => {\r\n        let dateContext = Object.assign({}, this.state.dateContext);\r\n        dateContext = moment(dateContext).add(1, \"month\");\r\n        this.setState({\r\n            dateContext: dateContext\r\n        });\r\n        this.props.onNextMonth && this.props.onNextMonth();\r\n    }\r\n\r\n    onDayClick = (e, day) => {\r\n        this.props.onDayClick && this.props.onDayClick(e, day);\r\n    }\r\n\r\n    render() {\r\n\r\n        let weekdays = this.weekdaysShort.map((day) => {\r\n            return (\r\n                <td key={day} >{day}</td>\r\n            )\r\n        });\r\n\r\n        let blanks = [];\r\n        for (let i = 0; i < this.firstDayOfMonth(); i++) {\r\n            blanks.push(<td key={i * 100} >\r\n                {\"\"}\r\n            </td>\r\n            );\r\n        }\r\n\r\n        let daysInMonth = [];\r\n        for (let d = 1; d <= this.daysInMonth(); d++) {\r\n            let className = (d === this.currentDate() ? \"day current-day\" : \"day\");          \r\n            daysInMonth.push(\r\n                <td key={d} className={className} >\r\n                    <span onClick={(e) => { this.onDayClick(e, d) }}>{d}</span>\r\n                </td>\r\n            );\r\n\r\n        }\r\n\r\n        var totalSlots = [...blanks, ...daysInMonth];\r\n        let rows = [];\r\n        let cells = [];\r\n\r\n        totalSlots.forEach((row, i) => {\r\n            if ((i % 7) !== 0) {\r\n                cells.push(row);\r\n            } else {\r\n                let insertRow = cells.slice();\r\n                rows.push(insertRow);\r\n                cells = [];\r\n                cells.push(row);\r\n            }\r\n            if (i === totalSlots.length - 1) {\r\n                let insertRow = cells.slice();\r\n                rows.push(insertRow);\r\n            }\r\n        });\r\n\r\n        let trElems = rows.map((d, i) => {\r\n            return (\r\n                <tr key={i * 80}>\r\n                    {d}\r\n                </tr>\r\n            );\r\n        });\r\n        let FontAwesome = require('react-fontawesome');\r\n\r\n        return (\r\n            <div className=\"calendar-container\" >\r\n                <table className=\"calendar\">\r\n                    <thead>\r\n                        <tr className=\"calendar-header\">\r\n                            <td colSpan=\"1\">\r\n                                <FontAwesome\r\n                                    className='left'\r\n                                    name='fa fa-chevron-left'\r\n                                    style={{ color: 'white' }}\r\n                                    onClick={(e) => { this.prevMonth() }}\r\n                                />\r\n                            </td>\r\n                            <td colSpan=\"5\">\r\n                                <this.MonthNav></this.MonthNav>\r\n                                {\" \"}\r\n                                <this.YearNav></this.YearNav>\r\n                            </td>\r\n                            <td colSpan=\"1\">\r\n                                <FontAwesome\r\n                                    className='right'\r\n                                    name='fa fa-chevron-right'\r\n                                    style={{ color: 'white' }}\r\n                                    onClick={(e) => { this.nextMonth() }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody >\r\n                        <tr>\r\n                            {weekdays}\r\n                        </tr>\r\n                        {trElems}\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Calendar from './Components/Calendar/';\n\n\nclass App extends Component {\n  onDayClick = (e, day) => {\n    alert(\"You choice \" + day);\n  }\n  render() {\n    return (\n      <div className=\"App\" >\n        <Calendar onDayClick={(e, day) => { this.onDayClick(e, day) }} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}